/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.glassfy;

import androidx.annotation.Nullable;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;

import java.util.HashMap;

import io.glassfy.androidsdk.Glassfy;
import io.glassfy.androidsdk.GlassfyError;
import io.glassfy.androidsdk.OfferingsCallback;
import io.glassfy.androidsdk.PermissionsCallback;
import io.glassfy.androidsdk.PurchaseCallback;
import io.glassfy.androidsdk.SkuCallback;
import io.glassfy.androidsdk.model.Offering;
import io.glassfy.androidsdk.model.Offerings;
import io.glassfy.androidsdk.model.Permission;
import io.glassfy.androidsdk.model.Permissions;
import io.glassfy.androidsdk.model.Sku;
import io.glassfy.androidsdk.model.Transaction;


@Kroll.module(name = "TiGlassfy", id = "ti.glassfy")
public class TiGlassfyModule extends KrollModule {

    // Standard Debugging variables
    private static final String LCAT = "TiGlassfyModule";

    public TiGlassfyModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }

    // Methods
    @Kroll.method
    public void initialize(String key) {
        Glassfy.initialize(TiApplication.getAppCurrentActivity(), key, false, null);
    }

    @Kroll.method
    public void getOfferings() {
        Glassfy.offerings(new OfferingsCallback() {
            @Override
            public void onResult(@Nullable Offerings offers, @Nullable GlassfyError err) {
                Offering offering = null;
                if (offers != null) {
                    for (Offering o : offers.getAll()) {
                        if (o.getOfferingId().equals("premium")) {
                            offering = o;
                        }
                    }
                }
                if (offering != null) {
                    KrollDict kdOffers = new KrollDict();
                    HashMap[] offerList = new HashMap[offering.getSkus().size()];
                    int i = 0;
                    for (Sku sku : offering.getSkus()) {
                        KrollDict kd = new KrollDict();
                        kd.put("title", sku.getProduct().getTitle());
                        kd.put("description", sku.getProduct().getDescription());
                        kd.put("price", sku.getProduct().getPrice());
                        // sku.getExtravars();
                        offerList[i] = kd;
                        ++i;
                    }
                    kdOffers.put("offers", offerList);
                    fireEvent("offerings", kdOffers);
                }
            }
        });
    }

    @Kroll.method
    public void getSku(String sku) {
        Glassfy.sku(sku, new SkuCallback() {
            @Override
            public void onResult(@Nullable Sku sku, @Nullable GlassfyError err) {
                if (sku != null) {
                    KrollDict kd = new KrollDict();
                    kd.put("title", sku.getProduct().getTitle());
                    kd.put("description", sku.getProduct().getDescription());
                    kd.put("price", sku.getProduct().getPrice());
                    // sku.getExtravars();
                    fireEvent("sku", kd);
                }
            }
        });
    }

    @Kroll.method
    public void purchase(String skuName) {
        Glassfy.sku(skuName, new SkuCallback() {
            @Override
            public void onResult(@Nullable Sku sku, @Nullable GlassfyError err) {
                if (sku != null) {
                    Glassfy.purchase(TiApplication.getAppCurrentActivity(), sku, new PurchaseCallback() {
                        @Override
                        public void onResult(@Nullable Transaction t, @Nullable GlassfyError err) {
                            // update app status accordingly
                            Permission permission = null;
                            if (t != null) {
                                for (Permission p : t.getPermissions().getAll()) {
                                    if (p.getPermissionId().equals("aPermission")) {
                                        permission = p;
                                    }
                                }
                            }
                            if (permission != null) {
                                KrollDict kd = new KrollDict();
                                kd.put("sku", skuName);
                                kd.put("isValid", permission.isValid());
                                fireEvent("purchase", kd);
                            }
                        }
                    });
                }
            }
        });
    }
    @Kroll.method
    public void getPermissions() {
        Glassfy.permissions(new PermissionsCallback() {
            @Override
            public void onResult(@Nullable Permissions permission, @Nullable GlassfyError error) {
                if (permission != null) {
                    KrollDict kd = new KrollDict();
                    HashMap[] permissions = new HashMap[permission.getAll().size()];
                    int i =0;
                    for (Permission p: permission.getAll()) {
                        KrollDict perm = new KrollDict();
                        perm.put("id", p.getPermissionId());
                        perm.put("isValid", p.isValid());
                        permissions[i] = perm;
                        ++i;
                    }
                    kd.put("permissions", permissions);
                    fireEvent("permissions", kd);
                }
            }
        });
    }
}

